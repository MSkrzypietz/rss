// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (token, expires_at, user_id)
VALUES (?, ?, ?)
    RETURNING id, created_at, updated_at, token, expires_at, user_id
`

type CreateSessionParams struct {
	Token     string
	ExpiresAt time.Time
	UserID    int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Token, arg.ExpiresAt, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Token,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getUserBySession = `-- name: GetUserBySession :one
SELECT u.id, u.created_at, u.updated_at, u.name, u.apikey FROM sessions s
    INNER JOIN users u ON u.id=s.user_id
    WHERE token=? AND expires_at>CURRENT_TIMESTAMP
`

func (q *Queries) GetUserBySession(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySession, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Apikey,
	)
	return i, err
}
