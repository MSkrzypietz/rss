// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_filters.sql

package database

import (
	"context"
)

const createFeedFilter = `-- name: CreateFeedFilter :one
INSERT INTO feed_filters (user_id, feed_id, filter_text)
VALUES (?, ?, ?)
    RETURNING id, created_at, updated_at, filter_text, active, user_id, feed_id
`

type CreateFeedFilterParams struct {
	UserID     int64  `json:"user_id"`
	FeedID     int64  `json:"feed_id"`
	FilterText string `json:"filter_text"`
}

func (q *Queries) CreateFeedFilter(ctx context.Context, arg CreateFeedFilterParams) (FeedFilter, error) {
	row := q.db.QueryRowContext(ctx, createFeedFilter, arg.UserID, arg.FeedID, arg.FilterText)
	var i FeedFilter
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FilterText,
		&i.Active,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFeedFilter = `-- name: DeleteFeedFilter :exec
DELETE FROM feed_filters WHERE id=?
`

func (q *Queries) DeleteFeedFilter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFilter, id)
	return err
}

const getFeedFilters = `-- name: GetFeedFilters :many
SELECT id, created_at, updated_at, filter_text, active, user_id, feed_id FROM feed_filters
WHERE feed_id=?
`

func (q *Queries) GetFeedFilters(ctx context.Context, feedID int64) ([]FeedFilter, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFilters, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFilter
	for rows.Next() {
		var i FeedFilter
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FilterText,
			&i.Active,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFeedFilters = `-- name: GetUserFeedFilters :many
SELECT id, created_at, updated_at, filter_text, active, user_id, feed_id FROM feed_filters
WHERE user_id=?
`

func (q *Queries) GetUserFeedFilters(ctx context.Context, userID int64) ([]FeedFilter, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFilters, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFilter
	for rows.Next() {
		var i FeedFilter
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FilterText,
			&i.Active,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
