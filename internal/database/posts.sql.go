// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, url, description, published_at, feed_id)
    VALUES (?, ?, ?, ?, ?)
    ON CONFLICT(url) DO UPDATE SET url=posts.url
    RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	PublishedAt sql.NullTime   `json:"published_at"`
	FeedID      int64          `json:"feed_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getUnreadPostsForUser = `-- name: GetUnreadPostsForUser :many
SELECT p.id, p.created_at, p.updated_at, p.title, p.url, p.description, p.published_at, p.feed_id, f.name as feed_name FROM posts p
    INNER JOIN feed_follows ff ON ff.feed_id=p.feed_id
    INNER JOIN feeds f ON f.id=p.feed_id
    LEFT JOIN post_reads pr ON pr.user_id=ff.user_id AND pr.post_id=p.id
    WHERE ff.user_id=? AND pr.id IS NULL
    ORDER BY p.published_at DESC LIMIT ?
`

type GetUnreadPostsForUserParams struct {
	UserID int64 `json:"user_id"`
	Limit  int64 `json:"limit"`
}

type GetUnreadPostsForUserRow struct {
	ID          int64          `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	PublishedAt sql.NullTime   `json:"published_at"`
	FeedID      int64          `json:"feed_id"`
	FeedName    string         `json:"feed_name"`
}

func (q *Queries) GetUnreadPostsForUser(ctx context.Context, arg GetUnreadPostsForUserParams) ([]GetUnreadPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnreadPostsForUserRow
	for rows.Next() {
		var i GetUnreadPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
